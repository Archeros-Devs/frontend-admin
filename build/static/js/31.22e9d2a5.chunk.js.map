{"version":3,"sources":["App/components/UcFirst.js","Demo/UIElements/Basic/Button.js","App/components/Card/Index.js"],"names":["UcFirst","string","this","props","text","charAt","toUpperCase","slice","React","Component","BasicButton","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","key","overlay","outlineButtons","squareButtons","className","basicDropdownButton","button","title","id","Item","eventKey","splitDropdownButton","Divider","require","MainCard","state","isOption","fullCard","collapseCard","loadCard","loading","cardRemove","activePage","componentWillReceiveProps","setState","cardReloadHandler","onCardReload","setInterval","cardRemoveHandler","pageNumber","onPageChange","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","style","right","display","float","padding","position","alignRight","Toggle","Menu","as","fullscreen","onClick","prevState","href","DEMO","BLANK_LINK","expand","reload","excludable","Header","Title","top","left","width","windowWidth","height","windowHeight","join","in","Body","bodyClass","children","pagination","Footer","paddingLeft","paddingRight","paddingTop","justifyContent","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","windowSize"],"mappings":"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","file":"static/js/31.22e9d2a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UcFirst extends React.Component {\r\n    render() {\r\n        const string = this.props.text;\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n}\r\n\r\nexport default UcFirst;","import React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n    ButtonToolbar,\r\n    Dropdown,\r\n    DropdownButton,\r\n    SplitButton\r\n} from 'react-bootstrap';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Card from \"../../../App/components/Card/Index.js\";\r\nimport UcFirst from \"../../../App/components/UcFirst\";\r\n\r\nclass BasicButton extends React.Component {\r\n    render() {\r\n        const buttonVariants = [\r\n            'primary',\r\n            'secondary',\r\n            'success',\r\n            'danger',\r\n            'warning',\r\n            'info',\r\n            'light',\r\n            'dark',\r\n        ];\r\n\r\n        const buttonOptions = [\r\n            {variant: 'primary', icon:'feather icon-thumbs-up'},\r\n            {variant: 'secondary', icon:'feather icon-camera'},\r\n            {variant: 'success', icon:'feather icon-check-circle'},\r\n            {variant: 'danger', icon:'feather icon-slash'},\r\n            {variant: 'warning', icon:'feather icon-alert-triangle'},\r\n            {variant: 'info', icon:'feather icon-info'}\r\n        ];\r\n\r\n        const basicButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\r\n                <Button variant={variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const outlineButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-'+variant}</Tooltip>}>\r\n                <Button variant={'outline-'+variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const squareButtons = buttonVariants.map((variant, idx) => <Button key={idx} className='btn-square' variant={variant}><UcFirst text={variant} /></Button>);\r\n\r\n\r\n        const basicDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <DropdownButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                </DropdownButton>\r\n            );\r\n        });\r\n\r\n        const splitDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <SplitButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-split-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                    className=\"mr-2 mb-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </SplitButton>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Default\">\r\n                            <p>use <code>variant=\"*\"</code> props in component <code>Button</code> to get various button</p>\r\n                            {basicButtons}\r\n                            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\r\n                                <Button variant=\"link\">Link</Button>\r\n                            </OverlayTrigger>\r\n                        </Card>\r\n                        <Card title=\"Outline\">\r\n                            <p>use <code>variant=\"outline-*\"</code> props in component <code>Button</code> to get various outline button</p>\r\n                            {outlineButtons}\r\n                        </Card>\r\n                        <Card title=\"Square Button\">\r\n                            <p>use <code>className=\"btn-square\"</code> props in component <code>Button</code> to get square button</p>\r\n                            {squareButtons}\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Basic Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {basicDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                        <Card title=\"Split Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {splitDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicButton;\r\n","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport DEMO from \"../../../store/constant\";\r\n\r\nimport Pagination from \"react-js-pagination\";\r\nrequire(\"./style.scss\");\r\n\r\n/**\r\n * Props\r\n * @param isOption {bollean} - Monstrar menu de opções\r\n *\r\n * @param loading {bollean} - Monstrar carregamento\r\n * @param onCardReload {function} - Chamada quando o botão recarregar é clicado\r\n *\r\n * @param pagination {Object} - Paginação\r\n * @param pagination.itemsCountPerPage {number} - Itens por pagina\r\n * @param pagination.totalItemsCount {number} - Total de itens\r\n * @param onPageChange {function} - Chamado quando a pagina for alterada\r\n *\r\n */\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: this.props.loading,\r\n        cardRemove: false,\r\n        activePage: 1\r\n    };\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        if(this.state.loadCard !== props.loading) this.setState({loadCard: props.loading})\r\n    }\r\n\r\n    cardReloadHandler = () => {\r\n        if(this.props.onCardReload) this.props.onCardReload();\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    handlePageChange(pageNumber) {\r\n        if(pageNumber !== this.state.activePage){\r\n            if(this.props.onPageChange) this.props.onPageChange(pageNumber);\r\n            this.setState({activePage: pageNumber});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [this.props.className];\r\n\r\n        if(this.state.isOption){\r\n            this.props.cardHeaderRight\r\n             ? cardHeaderRight =\r\n                <div style={{right: 10, display: 'inline-block', float: 'right', padding: 0, position: 'absolute'}}>\r\n                    {this.props.cardHeaderRight}\r\n                </div>\r\n            :\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            {this.props.fullscreen &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restaurar' : 'Maximizar'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.expand &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expandir' : 'Diminuir'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.reload &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Recarregar </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.excludable &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Excluir </a>\r\n                            </Dropdown.Item>}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body className={this.props.bodyClass}>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                        {this.props.pagination &&\r\n                        <Card.Footer style={{padding: 0, paddingLeft: '1em', paddingRight: '1em', paddingTop: '1em', display: 'flex', justifyContent: 'flex-end'}}>\r\n                        <Pagination\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.props.pagination.itemsCountPerPage}\r\n                            totalItemsCount={this.props.pagination.totalItemsCount}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\r\n                        />\r\n                        </Card.Footer>}\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n"],"sourceRoot":""}