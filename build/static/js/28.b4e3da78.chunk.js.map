{"version":3,"sources":["api.js","Screen/Pastas/Index.js"],"names":["api","axios","create","baseURL","defaults","headers","common","Authorization","concat","store","getState","auth","token","SamplePage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pasta_homologar","getPastaUnauthorized","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","get","sent","data","retorno","setState","pastas","console","log","msg","t0","error","stop","avaliar","_ref2","_callee2","id_pasta","avaliacao","_context2","put","map","p","objectSpread","_x","_x2","apply","arguments","_this2","react_default","createElement","_Aux","Row","Col","Card","className","Header","Title","as","Body","Table","responsive","hover","pasta","key","style","width","src","avatar2","alt","href","DEMO","BLANK_LINK","nome","discussao","moment","data_criacao","format","role","height","aria-valuenow","aria-valuemin","aria-valuemax","onClick","Component"],"mappings":"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","file":"static/js/28.b4e3da78.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { store, persistor } from './store/storage'\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:21086/',\r\n    //baseURL: 'http://peruibemelhor.nodejs7605.kinghost.net:21086/',\r\n});\r\n\r\napi.defaults.headers.common = {'Authorization': `Bearer ${store.getState().auth.token}`}\r\n\r\nexport default api;\r\n","import React, {Component} from 'react';\r\nimport {Row, Col, Table, Card, Tabs, Tab} from 'react-bootstrap';\r\n\r\nimport DEMO from \"../../store/constant\";\r\nimport Aux from \"../../hoc/_Aux\";\r\n\r\nimport axios from 'axios';\r\nimport api from '../../api'\r\nimport moment from 'moment';\r\n\r\nimport avatar1 from '../../assets/images/user/avatar-1.jpg';\r\nimport avatar2 from '../../assets/images/user/avatar-2.jpg';\r\nimport avatar3 from '../../assets/images/user/avatar-3.jpg';\r\n\r\nclass SamplePage extends Component {\r\n    constructor(props){super(props)}\r\n\r\n    state = {\r\n        pasta_homologar: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getPastaUnauthorized()\r\n    }\r\n\r\n    getPastaUnauthorized = async () => {\r\n        try {\r\n            const res = await api.get(`pastas/homologar`)\r\n            if(res.data.retorno){\r\n                this.setState({ pasta_homologar: res.data.pastas })\r\n                console.log(res.data.pastas)\r\n            }else{\r\n                console.log(res.data.msg)\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    avaliar = async (id_pasta, avaliacao) => {\r\n        console.log(this.state.pasta_homologar)\r\n        try {\r\n            const res = await api.put(`/pastas/${id_pasta}/avaliar`, {\r\n                avaliacao\r\n            })\r\n\r\n            if(res.data.retorno){\r\n                let pastas = this.state.pasta_homologar\r\n                pastas = pastas.map(p => {\r\n                    if (p.id_pasta == id_pasta) return {...p, avaliacao} \r\n                    return p\r\n                })\r\n                this.setState({pasta_homologar: pastas})\r\n            }else{\r\n                console.log(res.data.msg)\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className='Recent-Users'>\r\n                            <Card.Header>\r\n                                <Card.Title as='h5'>Pastas para Homologação</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body className='px-0 py-2'>\r\n                                <Table responsive hover>\r\n                                    <tbody>\r\n                                        {\r\n                                        this.state.pasta_homologar.map(pasta => \r\n                                            <tr className=\"unread\" key={pasta.id_pasta}>\r\n                                                <td><img className=\"rounded-circle\" style={{width: '40px'}} src={avatar2} alt=\"activity-user\"/></td>\r\n                                                <td>\r\n                                                    <h6 className=\"mb-1\"><a href={DEMO.BLANK_LINK} className=\"f-12\">{pasta.nome}</a></h6>\r\n                                                    <p className=\"m-0\">{pasta.discussao}</p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <h6 className=\"text-muted\"><i className=\"fa fa-circle text-c-yellow f-10 m-r-15\"/>{moment(pasta.data_criacao).format('DD/MM/Y')}</h6>\r\n                                                    \r\n                                                </td>\r\n                                                {\r\n                                                !pasta.avaliacao \r\n                                                ?\r\n                                                <td>\r\n                                                    <button onClick={() => this.avaliar(pasta.id_pasta, +1)} className=\"label theme-bg text-white f-12\">Aprovar</button>\r\n                                                    <button onClick={() => this.avaliar(pasta.id_pasta, -1)} className=\"label theme-bg2 text-white f-12\">Reprovar</button>\r\n                                                </td>\r\n                                                :\r\n                                                <td>\r\n                                                    <div className=\"progress-bar progress-c-theme2\" role=\"progressbar\" style={{width: '45%', height: '6px'}} aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\"/>\r\n                                                </td>\r\n                                                }\r\n                                            </tr>\r\n                                        )\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SamplePage;"],"sourceRoot":""}