{"version":3,"sources":["Screen/Administradores/NovoAdmin.js","App/components/Card/Index.js","api.js"],"names":["NovoAdmin","state","loading","cpf","event","res","target","value","match","this","setState","join","className","title","bodyClass","isOption","fullscreen","reload","onCardReload","console","log","style","padding","md","Group","controlId","Label","Control","type","placeholder","maxlength","onChange","e","handleChange","as","justifyContent","variant","React","Component","require","MainCard","props","fullCard","collapseCard","loadCard","cardRemove","activePage","componentWillReceiveProps","cardReloadHandler","setInterval","cardRemoveHandler","pageNumber","onPageChange","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","right","display","float","position","alignRight","Toggle","id","Menu","Item","onClick","prevState","href","DEMO","BLANK_LINK","expand","excludable","Header","Title","top","left","width","windowWidth","height","windowHeight","in","Body","children","pagination","Footer","paddingLeft","paddingRight","paddingTop","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","windowSize","api","token","store","getState","auth","axios","create","headers","baseURL","document","location","hostname"],"mappings":"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","file":"static/js/31.623afae3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport Card from '../../App/components/Card/Index'\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\n\r\nimport Api from \"../../api\"\r\n\r\nclass NovoAdmin extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        cpf: '',\r\n    }\r\n\r\n    handleChange(event) {\r\n        let cpf = event.target.value\r\n\r\n        var numberPattern = /\\d+/g;\r\n        var res = cpf.match(numberPattern) || []\r\n\r\n        this.setState({ cpf: res.join('') });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { loading, cpf } = this.state\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=''\r\n                            title={'Adicionar Novo Administrador'}\r\n                            bodyClass={'px-0 py-0'}\r\n                            isOption\r\n                            fullscreen\r\n                            reload\r\n                            loading={loading}\r\n                            onCardReload={() => { console.log('Recarregar') }}>\r\n                            <div style={{ padding: 15 }}>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.nome\">\r\n                                            <Form.Label>Nome</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Nome\" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.cpf\">\r\n                                            <Form.Label>CPF</Form.Label>\r\n                                            <Form.Control type=\"text\" maxlength=\"11\" value={cpf} onChange={e => this.handleChange(e)} placeholder=\"00000000000 \" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.sexo\">\r\n                                            <Form.Label>Sexo</Form.Label>\r\n                                            <Form.Control as=\"select\" className=\"mb-3\">\r\n                                                <option value=\"M\">Masculino</option>\r\n                                                <option value=\"F\">Feminino</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.email\">\r\n                                            <Form.Label>Email</Form.Label>\r\n                                            <Form.Control type=\"email\" placeholder=\"Email\" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.profissao\">\r\n                                            <Form.Label>Profissão</Form.Label>\r\n                                            <Form.Control type='text' placeholder=\"Profissão\" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.usuario\">\r\n                                            <Form.Label>Usuario</Form.Label>\r\n                                            <Form.Control as=\"select\" className=\"mb-3\">\r\n                                                <option value='1'>Administrador</option>\r\n                                                <option value='2'>Super Administrador</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row style={{ justifyContent: 'flex-end' }}>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Salvar\r\n                                    </Button>\r\n                                </Row>\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux >\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovoAdmin;","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport DEMO from \"../../../store/constant\";\r\n\r\nimport Pagination from \"react-js-pagination\";\r\nrequire(\"./style.scss\");\r\n\r\n/**\r\n * Props\r\n * @param isOption {bollean} - Monstrar menu de opções\r\n *\r\n * @param loading {bollean} - Monstrar carregamento\r\n * @param onCardReload {function} - Chamada quando o botão recarregar é clicado\r\n *\r\n * @param pagination {Object} - Paginação\r\n * @param pagination.itemsCountPerPage {number} - Itens por pagina\r\n * @param pagination.totalItemsCount {number} - Total de itens\r\n * @param onPageChange {function} - Chamado quando a pagina for alterada\r\n *\r\n */\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: this.props.loading,\r\n        cardRemove: false,\r\n        activePage: 1\r\n    };\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        if(this.state.loadCard !== props.loading) this.setState({loadCard: props.loading})\r\n    }\r\n\r\n    cardReloadHandler = () => {\r\n        if(this.props.onCardReload) this.props.onCardReload();\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    handlePageChange(pageNumber) {\r\n        if(pageNumber !== this.state.activePage){\r\n            if(this.props.onPageChange) this.props.onPageChange(pageNumber);\r\n            this.setState({activePage: pageNumber});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [this.props.className];\r\n\r\n        if(this.state.isOption){\r\n            this.props.cardHeaderRight\r\n             ? cardHeaderRight =\r\n                <div style={{right: 10, display: 'inline-block', float: 'right', padding: 0, position: 'absolute'}}>\r\n                    {this.props.cardHeaderRight}\r\n                </div>\r\n            :\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            {this.props.fullscreen &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restaurar' : 'Maximizar'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.expand &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expandir' : 'Diminuir'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.reload &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Recarregar </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.excludable &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Excluir </a>\r\n                            </Dropdown.Item>}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body className={this.props.bodyClass}>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                        {this.props.pagination &&\r\n                        <Card.Footer style={{padding: 0, paddingLeft: '1em', paddingRight: '1em', paddingTop: '1em', display: 'flex', justifyContent: 'flex-end'}}>\r\n                        <Pagination\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.props.pagination.itemsCountPerPage}\r\n                            totalItemsCount={this.props.pagination.totalItemsCount}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\r\n                        />\r\n                        </Card.Footer>}\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n","import axios from 'axios'\r\nimport { store } from './store/storage'\r\n\r\nconst api = () => {\r\n    let token = store.getState().auth.token\r\n\r\n    return axios.create({\r\n        headers: { 'Authorization': `Bearer ${token}` },\r\n        baseURL: document.location.hostname === 'localhost'\r\n            ? 'http://localhost:21086/'\r\n            : 'http://peruibemelhor.nodejs7605.kinghost.net:21086/',\r\n    })\r\n};\r\n\r\nexport default api;"],"sourceRoot":""}