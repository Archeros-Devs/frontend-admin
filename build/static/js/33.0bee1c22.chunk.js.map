{"version":3,"sources":["Screen/Pastas/Novo.js","App/components/Card/Index.js"],"names":["NovaPasta","props","state","loading","selectedFile","handleFiles","e","console","log","target","files","setState","fileImgs","React","createRef","this","className","title","bodyClass","isOption","fullscreen","reload","onCardReload","style","padding","md","Group","controlId","Label","Control","type","placeholder","as","ref","display","multiple","accept","onChange","Prepend","Text","cursor","background","color","onClick","current","click","value","map","i","name","aria-describedby","disabled","rows","justifyContent","variant","Component","require","MainCard","fullCard","collapseCard","loadCard","cardRemove","activePage","componentWillReceiveProps","cardReloadHandler","setInterval","cardRemoveHandler","pageNumber","onPageChange","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","right","float","position","alignRight","Toggle","id","Menu","Item","prevState","href","DEMO","BLANK_LINK","expand","excludable","Header","Title","top","left","width","windowWidth","height","windowHeight","join","in","Body","children","pagination","Footer","paddingLeft","paddingRight","paddingTop","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","windowSize"],"mappings":"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","file":"static/js/33.0bee1c22.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport Card from '../../App/components/Card/Index'\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\n\r\nclass NovaPasta extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fileImgs = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        loading: false,\r\n        selectedFile: []\r\n    }\r\n\r\n    handleFiles = (e) => {\r\n        console.log([...e.target.files])\r\n        this.setState({\r\n            selectedFile: [...e.target.files],\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { loading, selectedFile } = this.state\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card\r\n                            className=''\r\n                            title={'Nova Pasta'}\r\n                            bodyClass={'px-0 py-0'}\r\n                            isOption\r\n                            fullscreen\r\n                            reload\r\n                            loading={loading}\r\n                            onCardReload={() => { console.log('Recarregar') }}>\r\n                            <div style={{ padding: 15 }}>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.nome\">\r\n                                            <Form.Label>Nome da Pasta</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Nome\" />\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"novaPasta.discussao\">\r\n                                            <Form.Label>Discussão</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Discussão\" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.categoria\">\r\n                                            <Form.Label>Categoria</Form.Label>\r\n                                            <Form.Control as=\"select\">\r\n                                                <option>1</option>\r\n                                                <option>2</option>\r\n                                                <option>3</option>\r\n                                                <option>4</option>\r\n                                                <option>5</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"novaPasta.fotos\">\r\n                                            <Form.Label>Fotos</Form.Label>\r\n                                            <div>\r\n                                                <input type=\"file\" ref={this.fileImgs} style={{ display: 'none' }} multiple accept=\"image/*\" onChange={this.handleFiles} />\r\n                                                <InputGroup>\r\n                                                    <InputGroup.Prepend>\r\n                                                        <InputGroup.Text\r\n                                                            style={{ cursor: 'pointer', background: '#5fb2e9', color: 'white' }}\r\n                                                            onClick={() => { this.fileImgs.current.click() }}>\r\n                                                            Adicionar\r\n                                                        </InputGroup.Text>\r\n                                                    </InputGroup.Prepend>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Sem Fotos\"\r\n                                                        value={`${selectedFile.map(i => ' ' + i.name)}`}\r\n                                                        aria-describedby=\"inputGroupPrepend\"\r\n                                                        disabled\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </div>\r\n\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Form.Group controlId=\"exampleForm.descricao\">\r\n                                            <Form.Label>Descrição</Form.Label>\r\n                                            <Form.Control as=\"textarea\" rows=\"3\" />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row style={{justifyContent: 'flex-end'}}>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Salvar\r\n                                    </Button>\r\n                                </Row>\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovaPasta;","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport DEMO from \"../../../store/constant\";\r\n\r\nimport Pagination from \"react-js-pagination\";\r\nrequire(\"./style.scss\");\r\n\r\n/**\r\n * Props\r\n * @param isOption {bollean} - Monstrar menu de opções\r\n *\r\n * @param loading {bollean} - Monstrar carregamento\r\n * @param onCardReload {function} - Chamada quando o botão recarregar é clicado\r\n *\r\n * @param pagination {Object} - Paginação\r\n * @param pagination.itemsCountPerPage {number} - Itens por pagina\r\n * @param pagination.totalItemsCount {number} - Total de itens\r\n * @param onPageChange {function} - Chamado quando a pagina for alterada\r\n *\r\n */\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: this.props.loading,\r\n        cardRemove: false,\r\n        activePage: 1\r\n    };\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        if(this.state.loadCard !== props.loading) this.setState({loadCard: props.loading})\r\n    }\r\n\r\n    cardReloadHandler = () => {\r\n        if(this.props.onCardReload) this.props.onCardReload();\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    handlePageChange(pageNumber) {\r\n        if(pageNumber !== this.state.activePage){\r\n            if(this.props.onPageChange) this.props.onPageChange(pageNumber);\r\n            this.setState({activePage: pageNumber});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [this.props.className];\r\n\r\n        if(this.state.isOption){\r\n            this.props.cardHeaderRight\r\n             ? cardHeaderRight =\r\n                <div style={{right: 10, display: 'inline-block', float: 'right', padding: 0, position: 'absolute'}}>\r\n                    {this.props.cardHeaderRight}\r\n                </div>\r\n            :\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            {this.props.fullscreen &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restaurar' : 'Maximizar'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.expand &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expandir' : 'Diminuir'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.reload &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Recarregar </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.excludable &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Excluir </a>\r\n                            </Dropdown.Item>}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body className={this.props.bodyClass}>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                        {this.props.pagination &&\r\n                        <Card.Footer style={{padding: 0, paddingLeft: '1em', paddingRight: '1em', paddingTop: '1em', display: 'flex', justifyContent: 'flex-end'}}>\r\n                        <Pagination\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.props.pagination.itemsCountPerPage}\r\n                            totalItemsCount={this.props.pagination.totalItemsCount}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\r\n                        />\r\n                        </Card.Footer>}\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n"],"sourceRoot":""}