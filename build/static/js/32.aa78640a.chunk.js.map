{"version":3,"sources":["Screen/Administradores/NovoAdmin.js","App/components/Card/Index.js","api.js"],"names":["NovoAdmin","state","loading","nome","cpf","sexo","email","profissao","tipo","erros","event","res","target","value","match","this","setState","join","e","length","push","Api","post","then","console","log","data","catch","err","error","preventDefault","className","title","bodyClass","isOption","fullscreen","reload","onCardReload","onSubmit","handleSubmit","style","padding","md","Group","controlId","Label","Control","type","onChange","placeholder","required","isInvalid","includes","maxlength","handleChangeCpf","as","justifyContent","variant","React","Component","require","MainCard","props","fullCard","collapseCard","loadCard","cardRemove","activePage","componentWillReceiveProps","cardReloadHandler","setInterval","cardRemoveHandler","pageNumber","onPageChange","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","right","display","float","position","alignRight","Toggle","id","Menu","Item","onClick","prevState","href","DEMO","BLANK_LINK","expand","excludable","Header","Title","top","left","width","windowWidth","height","windowHeight","in","Body","children","pagination","Footer","paddingLeft","paddingRight","paddingTop","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","windowSize","api","token","store","getState","auth","axios","create","headers","baseURL","document","location","hostname"],"mappings":"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","file":"static/js/32.aa78640a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport Card from '../../App/components/Card/Index'\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\n\r\nimport Api from \"../../api\"\r\n\r\nclass NovoAdmin extends React.Component {\r\n    state = {\r\n        loading: false,\r\n\r\n        nome: '',\r\n        cpf: '',\r\n        sexo: 'M',\r\n        email: '',\r\n        profissao: '',\r\n        tipo: '1',\r\n\r\n        erros: [],\r\n    }\r\n\r\n    handleChangeCpf(event) {\r\n        let cpf = event.target.value\r\n\r\n        var numberPattern = /\\d+/g;\r\n        var res = cpf.match(numberPattern) || []\r\n\r\n        this.setState({ cpf: res.join('') });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        const { cpf, email, nome, profissao, sexo, tipo } = this.state\r\n        let erros = []\r\n\r\n        if(cpf.length !== 11)\r\n            erros.push('cpf') \r\n        if(sexo !== 'M' && sexo !== 'F')\r\n            erros.push('sexo')\r\n        if(tipo !== '1' && tipo !== '2')\r\n            erros.push('tipo') \r\n        \r\n        if(erros.length > 0)\r\n            return this.setState({erros})\r\n        \r\n        Api().post('/pastas', { cpf, email, nome, profissao, sexo, tipo })\r\n        .then(res => {\r\n            console.log(res.data)\r\n        })\r\n        .catch(err => {\r\n            console.error(err)\r\n        })\r\n        \r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { loading, cpf, erros } = this.state\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=''\r\n                            title={'Adicionar Novo Administrador'}\r\n                            bodyClass={'px-0 py-0'}\r\n                            isOption\r\n                            fullscreen\r\n                            reload\r\n                            loading={loading}\r\n                            onCardReload={() => { console.log('Recarregar') }}>\r\n                            <Form onSubmit={e => this.handleSubmit(e)} style={{ padding: 15 }} >\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.nome\">\r\n                                            <Form.Label>Nome</Form.Label>\r\n                                            <Form.Control type=\"text\" onChange={e => this.setState({ nome: e.target.value })} placeholder=\"Nome\" required isInvalid={erros.includes('nome')} />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.cpf\">\r\n                                            <Form.Label>CPF</Form.Label>\r\n                                            <Form.Control type=\"text\" maxlength=\"11\" value={cpf} onChange={e => this.handleChangeCpf(e)} placeholder=\"00000000000\" required isInvalid={erros.includes('cpf')}/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.sexo\">\r\n                                            <Form.Label>Sexo</Form.Label>\r\n                                            <Form.Control as=\"select\" className=\"mb-3\" onChange={e => this.setState({ sexo: e.target.value })} required isInvalid={erros.includes('sexo')}>\r\n                                                <option value=\"M\">Masculino</option>\r\n                                                <option value=\"F\">Feminino</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form.Group controlId=\"novaPasta.email\">\r\n                                            <Form.Label>Email</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Email\" onChange={e => this.setState({ email: e.target.value })} required isInvalid={erros.includes('email')} />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.profissao\">\r\n                                            <Form.Label>Profissão</Form.Label>\r\n                                            <Form.Control type='text' placeholder=\"Profissão\" onChange={e => this.setState({ profissao: e.target.value })} required isInvalid={erros.includes('profissao')} />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col md={3}>\r\n                                        <Form.Group controlId=\"novaPasta.usuario\">\r\n                                            <Form.Label>Tipo</Form.Label>\r\n                                            <Form.Control as=\"select\" className=\"mb-3\"  onChange={e => this.setState({ tipo: e.target.value })} required isInvalid={erros.includes('tipo')}>\r\n                                                <option value='1'>Administrador</option>\r\n                                                <option value='2'>Super Administrador</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row style={{ justifyContent: 'flex-end' }}>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Salvar\r\n                                    </Button>\r\n                                </Row>\r\n                            </Form>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux >\r\n        )\r\n    }\r\n}\r\n\r\nexport default NovoAdmin;","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport DEMO from \"../../../store/constant\";\r\n\r\nimport Pagination from \"react-js-pagination\";\r\nrequire(\"./style.scss\");\r\n\r\n/**\r\n * Props\r\n * @param isOption {bollean} - Monstrar menu de opções\r\n *\r\n * @param loading {bollean} - Monstrar carregamento\r\n * @param onCardReload {function} - Chamada quando o botão recarregar é clicado\r\n *\r\n * @param pagination {Object} - Paginação\r\n * @param pagination.itemsCountPerPage {number} - Itens por pagina\r\n * @param pagination.totalItemsCount {number} - Total de itens\r\n * @param onPageChange {function} - Chamado quando a pagina for alterada\r\n *\r\n */\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: this.props.loading,\r\n        cardRemove: false,\r\n        activePage: 1\r\n    };\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        if(this.state.loadCard !== props.loading) this.setState({loadCard: props.loading})\r\n    }\r\n\r\n    cardReloadHandler = () => {\r\n        if(this.props.onCardReload) this.props.onCardReload();\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    handlePageChange(pageNumber) {\r\n        if(pageNumber !== this.state.activePage){\r\n            if(this.props.onPageChange) this.props.onPageChange(pageNumber);\r\n            this.setState({activePage: pageNumber});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [this.props.className];\r\n\r\n        if(this.state.isOption){\r\n            this.props.cardHeaderRight\r\n             ? cardHeaderRight =\r\n                <div style={{right: 10, display: 'inline-block', float: 'right', padding: 0, position: 'absolute'}}>\r\n                    {this.props.cardHeaderRight}\r\n                </div>\r\n            :\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            {this.props.fullscreen &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restaurar' : 'Maximizar'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.expand &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expandir' : 'Diminuir'} </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.reload &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Recarregar </a>\r\n                            </Dropdown.Item>}\r\n                            {this.props.excludable &&\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Excluir </a>\r\n                            </Dropdown.Item>}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body className={this.props.bodyClass}>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                        {this.props.pagination &&\r\n                        <Card.Footer style={{padding: 0, paddingLeft: '1em', paddingRight: '1em', paddingTop: '1em', display: 'flex', justifyContent: 'flex-end'}}>\r\n                        <Pagination\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.props.pagination.itemsCountPerPage}\r\n                            totalItemsCount={this.props.pagination.totalItemsCount}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(pageNumber) => this.handlePageChange(pageNumber)}\r\n                        />\r\n                        </Card.Footer>}\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n","import axios from 'axios'\r\nimport { store } from './store/storage'\r\n\r\nconst api = () => {\r\n    let token = store.getState().auth.token\r\n\r\n    return axios.create({\r\n        headers: { 'Authorization': `Bearer ${token}` },\r\n        baseURL: document.location.hostname === 'localhost'\r\n            ? 'http://localhost:21086/'\r\n            : 'http://peruibemelhor.nodejs7605.kinghost.net:21086/',\r\n    })\r\n};\r\n\r\nexport default api;"],"sourceRoot":""}